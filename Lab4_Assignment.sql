DROP DATABASE IF EXISTS ORDER_DIRECTORY;

CREATE DATABASE ORDER_DIRECTORY;

/* 1)	You are required to create tables for supplier,customer,category,product,
supplier_pricing,order,rating to store the data for the E-commerce with the schema definition given below.*/

USE ORDER_DIRECTORY;

DROP TABLE IF EXISTS SUPPLIER;
CREATE TABLE SUPPLIER(SUPP_ID INT PRIMARY KEY, SUPP_NAME VARCHAR(50) NOT NULL, SUPP_CITY VARCHAR(50) NOT NULL,
SUPP_PHONE VARCHAR(50) NOT NULL);

DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER(CUS_ID INT PRIMARY KEY, CUS_NAME VARCHAR(20) NOT NULL, CUS_PHONE VARCHAR(10) NOT NULL,
CUS_CITY VARCHAR(30) NOT NULL, CUS_GENDER CHAR);


DROP TABLE IF EXISTS CATEGORY;
CREATE TABLE CATEGORY(CAT_ID INT PRIMARY KEY, CAT_NAME VARCHAR(20) NOT NULL);


DROP TABLE IF EXISTS PRODUCT;
CREATE TABLE PRODUCT(PRO_ID INT PRIMARY KEY, PRO_NAME VARCHAR(20) NOT NULL DEFAULT "DUMMY", PRO_DESC VARCHAR(60), 
CAT_ID INT, FOREIGN KEY (CAT_ID) REFERENCES CATEGORY(CAT_ID));



DROP TABLE IF EXISTS SUPPLIER_PRICING;
CREATE TABLE SUPPLIER_PRICING(PRICING_ID INT PRIMARY KEY, PRO_ID INT, SUPP_ID INT, 
SUPP_PRICE INT DEFAULT 10, FOREIGN KEY (PRO_ID) REFERENCES PRODUCT(PRO_ID),
FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER(SUPP_ID));


DROP TABLE IF EXISTS `ORDER`;
CREATE TABLE `ORDER`(ORD_ID INT PRIMARY KEY, ORD_AMOUNT INT NOT NULL, ORD_DATE DATE, 
CUS_ID INT, PRICING_ID INT,
FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
FOREIGN KEY (PRICING_ID) REFERENCES SUPPLIER_PRICING(PRICING_ID));


DROP TABLE IF EXISTS RATING;
CREATE TABLE RATING(RAT_ID INT PRIMARY KEY, ORD_ID INT, RAT_RATSTARS INT NOT NULL,
FOREIGN KEY (ORD_ID) REFERENCES `ORDER`(ORD_ID));

SHOW TABLES;

/*2)	Insert the following data in the table created above */

INSERT INTO SUPPLIER VALUES(1,"Rajesh Retails","Delhi",'1234567890');
INSERT INTO SUPPLIER VALUES(2,"Appario Ltd.","Mumbai",'2589631470');
INSERT INTO SUPPLIER VALUES(3,"Knome products","Banglore",'9785462315');
INSERT INTO SUPPLIER VALUES(4,"Bansal Retails","Kochi",'8975463285');
INSERT INTO SUPPLIER VALUES(5,"Mittal Ltd.","Lucknow",'7898456532');

SELECT * FROM SUPPLIER;

INSERT INTO CUSTOMER VALUES(1,"AAKASH",'9999999999',"DELHI",'M');
INSERT INTO CUSTOMER VALUES(2,"AMAN",'9785463215',"NOIDA",'M');
INSERT INTO CUSTOMER VALUES(3,"NEHA",'9999999999',"MUMBAI",'F');
INSERT INTO CUSTOMER VALUES(4,"MEGHA",'9994562399',"KOLKATA",'F');
INSERT INTO CUSTOMER VALUES(5,"PULKIT",'7895999999',"LUCKNOW",'M');

SELECT * FROM CUSTOMER;

INSERT INTO CATEGORY VALUES( 1,"BOOKS");
INSERT INTO CATEGORY VALUES(2,"GAMES");
INSERT INTO CATEGORY VALUES(3,"GROCERIES");
INSERT INTO CATEGORY VALUES (4,"ELECTRONICS");
INSERT INTO CATEGORY VALUES(5,"CLOTHES");

SELECT * FROM CATEGORY;

INSERT INTO PRODUCT VALUES(1,"GTA V","Windows 7 and above with i5 processor and 8GB RAM",2);
INSERT INTO PRODUCT VALUES(2,"TSHIRT","SIZE-L with Black, Blue and White variations",5);
INSERT INTO PRODUCT VALUES(3,"ROG LAPTOP","Windows 10 with 15inch screen, i7 processor, 1TB SSD",4);
INSERT INTO PRODUCT VALUES(4,"OATS","Highly Nutritious from Nestle",3);
INSERT INTO PRODUCT VALUES(5,"HARRY POTTER","Best Collection of all time by J.K Rowling",1);
INSERT INTO PRODUCT VALUES(6,"MILK","1L Toned MIlk",3);
INSERT INTO PRODUCT VALUES(7,"Boat EarPhones","1.5Meter long Dolby Atmos",4);
INSERT INTO PRODUCT VALUES(8,"Jeans","Stretchable Denim Jeans with various sizes and color",5);
INSERT INTO PRODUCT VALUES(9,"Project IGI","compatible with windows 7 and above",2);
INSERT INTO PRODUCT VALUES(10,"Hoodie","Black GUCCI for 13 yrs and above",5);
INSERT INTO PRODUCT VALUES(11,"Rich Dad Poor Dad","Written by RObert Kiyosaki",1);
INSERT INTO PRODUCT VALUES(12,"Train Your Brain","By Shireen Stephen",1);

SELECT * FROM PRODUCT;

INSERT INTO SUPPLIER_PRICING VALUES(1,1,2,1500);
INSERT INTO SUPPLIER_PRICING VALUES(2,3,5,30000);
INSERT INTO SUPPLIER_PRICING VALUES(3,5,1,3000);
INSERT INTO SUPPLIER_PRICING VALUES(4,2,3,2500);
INSERT INTO SUPPLIER_PRICING VALUES(5,4,1,1000);
INSERT INTO SUPPLIER_PRICING VALUES(6,12,2,780);
INSERT INTO SUPPLIER_PRICING VALUES(7,12,4,789);
INSERT INTO SUPPLIER_PRICING VALUES(8,3,1,31000);
INSERT INTO SUPPLIER_PRICING VALUES(9,1,5,1450);
INSERT INTO SUPPLIER_PRICING VALUES(10,4,2,999);
INSERT INTO SUPPLIER_PRICING VALUES(11,7,3,549);
INSERT INTO SUPPLIER_PRICING VALUES(12,7,4,529);
INSERT INTO SUPPLIER_PRICING VALUES(13,6,2,105);
INSERT INTO SUPPLIER_PRICING VALUES(14,6,1,99);
INSERT INTO SUPPLIER_PRICING VALUES(15,2,5,2999);
INSERT INTO SUPPLIER_PRICING VALUES(16,5,2,2999);

SELECT * FROM SUPPLIER_PRICING;

INSERT INTO `ORDER`  VALUES (101,1500,"2021-10-06",2,1);
INSERT INTO `ORDER` VALUES(102,1000,"2021-10-12",3,5);
INSERT INTO `ORDER` VALUES(103,30000,"2021-09-16",5,2);
INSERT INTO `ORDER` VALUES(104,1500,"2021-10-05",1,1);
INSERT INTO `ORDER` VALUES(105,3000,"2021-08-16",4,3);
INSERT INTO `ORDER` VALUES(106,1450,"2021-08-18",1,9);
INSERT INTO `ORDER` VALUES(107,789,"2021-09-01",3,7);
INSERT INTO `ORDER` VALUES(108,780,"2021-09-07",5,6);
INSERT INTO `ORDER` VALUES(109,3000,"2021-09-10",5,3);
INSERT INTO `ORDER` VALUES(110,2500,"2021-09-10",2,4);
INSERT INTO `ORDER` VALUES(111,1000,"2021-09-15",4,5);
INSERT INTO `ORDER` VALUES(112,789,"2021-09-16",4,7);
INSERT INTO `ORDER` VALUES(113,31000,"2021-09-16",1,8);
INSERT INTO `ORDER` VALUES(114,1000,"2021-09-16",3,5);
INSERT INTO `ORDER` VALUES(115,3000,"2021-09-16",5,3);
INSERT INTO `ORDER` VALUES(116,99,"2021-09-17",2,14);

SELECT * FROM `ORDER`;

INSERT INTO RATING VALUES(1,101,4);
INSERT INTO RATING VALUES(2,102,3);
INSERT INTO RATING VALUES(3,103,1);
INSERT INTO RATING VALUES(4,104,2);
INSERT INTO RATING VALUES(5,105,4);
INSERT INTO RATING VALUES(6,106,3);
INSERT INTO RATING VALUES(7,107,4);
INSERT INTO RATING VALUES(8,108,4);
INSERT INTO RATING VALUES(9,109,3);
INSERT INTO RATING VALUES(10,110,5);
INSERT INTO RATING VALUES(11,111,3);
INSERT INTO RATING VALUES(12,112,4);
INSERT INTO RATING VALUES(13,113,2);
INSERT INTO RATING VALUES(14,114,1);
INSERT INTO RATING VALUES(15,115,1);
INSERT INTO RATING VALUES(16,116,0);


SELECT * FROM RATING;

/*3)	Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.*/
SELECT COUNT(ID) AS CUSTOMER_COUNT, GENDER FROM (SELECT DISTINCT CUSTOMER.CUS_ID AS ID, CUS_GENDER AS GENDER
FROM CUSTOMER INNER JOIN `ORDER` ON CUSTOMER.CUS_ID = `ORDER`.CUS_ID WHERE ORD_AMOUNT >= 3000) 
AS SUBQUERY GROUP BY GENDER; 



/*4)	Display all the orders along with product name ordered by a customer having Customer_Id=2 */

SELECT ORD.ORD_ID AS ORDER_ID, ORD.ORD_AMOUNT AS ORDER_AMOUNT, ORD.ORD_DATE AS ORDER_DATE,
PRODUCT.PRO_NAME AS PRODUCT_NAME, ORD.CUS_ID AS CUSTOMER_ID FROM `ORDER` AS ORD 
INNER JOIN SUPPLIER_PRICING AS SP ON ORD.PRICING_ID = SP.PRICING_ID
INNER JOIN PRODUCT ON PRODUCT.PRO_ID = SP.PRO_ID
WHERE ORD.CUS_ID = 2;
 
/*5)	Display the Supplier details who can supply more than one product.  */
 
 SELECT * FROM SUPPLIER WHERE SUPPLIER.SUPP_ID IN (SELECT SUPP_ID FROM 
 SUPPLIER_PRICING GROUP BY SUPP_ID HAVING COUNT(SUPP_ID)>1) GROUP BY SUPPLIER.SUPP_ID;



/* 6)Find the least expensive product from each category and print the table 
with category id, name, product name and price of the product */

SELECT CATG.CAT_ID AS CATEGORY_ID, CATG.CAT_NAME AS CATEGORY_NAME, MIN(SP.SUPP_PRICE)
AS PRICE_OF_PRODUCT FROM CATEGORY CATG
INNER JOIN PRODUCT PROD ON CATG.CAT_ID = PROD.CAT_ID
INNER JOIN SUPPLIER_PRICING SP ON SP.PRO_ID = PROD.PRO_ID
GROUP BY CATG.CAT_ID;

/*7)	Display the Id and Name of the Product ordered after “2021-10-05”.*/
SELECT PROD.PRO_ID, PROD.PRO_NAME, O.ORD_DATE FROM PRODUCT PROD
INNER JOIN SUPPLIER_PRICING SP ON SP.PRO_ID = PROD.PRO_ID
INNER JOIN `ORDER` O ON O.PRICING_ID = SP.PRICING_ID
WHERE O.ORD_DATE > "2021-10-05";

/*8)	Display customer name and gender whose names start or end with character 'A'.*/
SELECT CUS_NAME, CUS_GENDER FROM CUSTOMER WHERE CUS_NAME LIKE 'A%' OR CUS_NAME LIKE '%A';


/* 9)	Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, 
If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, 
If rating >2 print “Average Service” else print “Poor Service”. */



CREATE DEFINER=`root`@`localhost` PROCEDURE `rate_service`()
BEGIN
SELECT SUPP.SUPP_ID, SUPP.SUPP_NAME, RAT.RAT_RATSTARS,
CASE
	WHEN RAT.RAT_RATSTARS = 5 THEN "EXCELLENT SERVICE"
    WHEN RAT.RAT_RATSTARS > 4 THEN "GOOD SERVICE"
    WHEN RAT.RAT_RATSTARS > 2 THEN "AVERAGE SERVICE"
	ELSE "POOR SERVICE"
    END AS TYPE_OF_SERVICE
    FROM SUPPLIER SUPP
    INNER JOIN SUPPLIER_PRICING SP ON SP.SUPP_ID = SUPP.SUPP_ID
    INNER JOIN `ORDER` O ON SP.PRICING_ID = O.PRICING_ID
    INNER JOIN RATING RAT ON RAT.ORD_ID = O.ORD_ID;
END